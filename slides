//html

<div class="wrapper">
        <div class="range">
          <input type="range" min="0" max="53" value="0" id="rangeYear" />
          <div id="valueYear">1970</div>
        </div>
        <div class="range">
          <input type="range" min="1" max="12" value="1" id="rangeMonth" />
          <div id="valueMonth">01</div>
        </div>
        <div class="range">
          <input type="range" min="1" max="31" value="1" id="rangeDay" />
          <div id="valueDay">01</div>
        </div>
  </div>


<script>
const sliderYear = document.getElementById("rangeYear");
const sliderMonth = document.getElementById("rangeMonth");
const sliderDay = document.getElementById("rangeDay");

const valueYear = document.getElementById("valueYear");
const valueMonth = document.getElementById("valueMonth");
const valueDay = document.getElementById("valueDay");

function updateMaxDayValue() {
  let selectedMonth = parseInt(sliderMonth.value, 10);
  let maxDay;
  // Calculate the maximum day based on the selected month
  if ([4, 6, 9, 11].includes(selectedMonth)) {
    // Months with 30 days
    maxDay = 30;
  } else if (selectedMonth === 2) {
    // February (assuming non-leap year)
    maxDay = 28;
  } else {
    // Months with 31 days
    maxDay = 31;
  }
  if (parseInt(sliderDay.value, 10) > maxDay) {
    sliderDay.value = maxDay.toString(); // Set the day value to the new maximum
    valueDay.textContent=maxDay.toString();
  }
  sliderDay.max = maxDay.toString();

  // Check if the current day value is greater than the new maximum

}

// Function to update the displayed date and background color
function updateSliders() {
  let year = parseInt(sliderYear.value, 10) + 1970;
  let month = parseInt(sliderMonth.value, 10).toString().padStart(2, '0');
  let day = parseInt(sliderDay.value, 10).toString().padStart(2, '0');

  valueYear.textContent = year;
  valueMonth.textContent = month;
  valueDay.textContent = day;

  // Calculate the progress as a percentage for each slider
  let progressYear = ((year - 1970) / (sliderYear.max - sliderYear.min)) * 100;
  let progressMonth = ((month - 1) / (sliderMonth.max - sliderMonth.min)) * 100;
  let progressDay = ((day - 1) / (sliderDay.max - sliderDay.min)) * 100;

  // Set the background color with linear gradients for each slider
  sliderYear.style.background = `linear-gradient(to right, rgb(99, 99, 238) ${progressYear}%, #ccc ${progressYear}%)`;
  sliderMonth.style.background = `linear-gradient(to right, rgb(99, 99, 238) ${progressMonth}%, #ccc ${progressMonth}%)`;
  sliderDay.style.background = `linear-gradient(to right, rgb(99, 99, 238) ${progressDay}%, #ccc ${progressDay}%)`;
}

// Add event listeners to each slider
sliderYear.addEventListener("input", () => {
  updateSliders();
  updateMaxDayValue(); // Update the maximum day value when the year changes
});

sliderMonth.addEventListener("input", () => {
  updateSliders();
  updateMaxDayValue(); // Update the maximum day value when the month changes
});

sliderDay.addEventListener("input", () => {
  updateSliders();
});

// Call the function initially to set the initial displayed date and background color
updateSliders();
</script>


//style
input[type="range"] {
    /* removing default appearance */
    -webkit-appearance: none;
    appearance: none; 
    /* creating a custom design */
    width: 100%;
    cursor: pointer;
    outline: none;
    border-radius: 15px;
    /*  overflow: hidden;  remove this line*/
    
    /* New additions */
    height: 6px;
    background: #ccc;
  }
  
  /* Thumb: webkit */
  input[type="range"]::-webkit-slider-thumb {
    /* removing default appearance */
    -webkit-appearance: none;
    appearance: none; 
    /* creating a custom design */
    height: 15px;
    width: 15px;
    background-color: rgb(99, 99, 238);
    border-radius: 50%;
    border: none;
  
    /* box-shadow: -407px 0 0 400px #f50; emove this line */
    transition: .2s ease-in-out;
  }
  
  
  
  
  /* Thumb: Firefox */
  input[type="range"]::-moz-range-thumb {
    height: 15px;
    width: 15px;
    background-color: rgb(99, 99, 238);
    border-radius: 50%;
    border: none;
    
    /* box-shadow: -407px 0 0 400px #f50; emove this line */
    transition: .2s ease-in-out;
  }
  
  /* Hover, active & focus Thumb: Webkit */
  
  input[type="range"]::-webkit-slider-thumb:hover {
    box-shadow: 0 0 0 10px rgba(188, 188, 243, 0.1)
  }
  input[type="range"]:active::-webkit-slider-thumb {
    box-shadow: 0 0 0 13px rgba(188, 188, 243, 0.1)
  }
  input[type="range"]:focus::-webkit-slider-thumb {
    box-shadow: 0 0 0 13px rgba(188, 188, 243, 0.1)
  }
  
  /* Hover, active & focus Thumb: Firfox */
  
  input[type="range"]::-moz-range-thumb:hover {
    box-shadow: 0 0 0 10px rgba(188, 188, 243, 0.1)
  }
  input[type="range"]:active::-moz-range-thumb {
    box-shadow: 0 0 0 13px rgba(188, 188, 243, 0.1)
  }
  input[type="range"]:focus::-moz-range-thumb {
    box-shadow: 0 0 0 13px rgba(188, 188, 243, 0.1)  
  }
  
  
  .wrapper {
    width: 100%;
    width: 350px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 auto;
  }
  
  .range {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin: 0 auto;
    height: 4rem;
    width: 80%;
    padding: 0px 10px;
  }
  
  .value {
    font-size: 26px;    
    width: 50px;
    text-align: center;
  }
  